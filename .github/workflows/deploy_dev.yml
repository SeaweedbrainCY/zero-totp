name: "dev.zero-totp.com deployment"

permissions:
  contents: read
  packages: write


on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+-dev.[0-9]+'

jobs:
    tests:
        uses: ./.github/workflows/test.yml 
        secrets:
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
          MAXMIND_PERMALINK: ${{ secrets.MAXMIND_PERMALINK }}

    
    build-frontend:
      needs: [tests]
      name: Build and Publish multi-arch Frontend Docker image
      runs-on: ubuntu-latest
      strategy:
        fail-fast: false
        matrix:
          platform:
            - linux/amd64
            - linux/arm64
      steps:
        - uses: actions/checkout@v4

        - name: Extract Git commit
          id: vars
          run: |
            echo "GIT_COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
            echo "CURRENT_VERSION=$(echo ${{ github.ref_name }} | sed 's/^v//')"  >> $GITHUB_ENV
            echo "REPOSITORY_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV 
            platform=${{ matrix.platform }}
            echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
        
        - name: Create environment file
          working-directory: ./frontend
          run: bash generate-env.sh '${{ github.ref_name }}' '${{secrets.DEV_RSA_PUBLIC_KEY}}'

        - name: Generate sitemap.xml
          working-directory: ./frontend
          run: bash generate_sitemap.sh 

        
        - name: Set up Qemu 
          uses: docker/setup-qemu-action@v3

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3

        - name: Login to GHCR 
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Docker meta
          id: meta
          uses: docker/metadata-action@v5
          with:
            images: ghcr.io/${{ env.REPOSITORY_NAME }}-frontend
            tags: |
              type=semver,pattern={{raw}}
              type=raw,value=dev


        - name: Build and push Docker images
          uses: docker/build-push-action@v6
          id: build
          with:
            context: ./frontend
 
            tags: ghcr.io/${{ env.REPOSITORY_NAME }}-frontend
            labels: |
              org.opencontainers.image.title=Zero-TOTP frontend - dev version 
              org.opencontainers.image.description=The development version of Zero-TOTP frontend used for testing and development purposes.
              org.opencontainers.image.authors=SeaweedbrainCY <contact@seaweedbrain.xyz>
              org.opencontainers.image.url=https://github.com/seaweedbraincy/zero-totp
              org.opencontainers.image.documentation=https://docs.zero-totp.com
              maintainer=SeaweedbrainCY <contact@seaweedbrain.xyz>
            annotations: |
              org.opencontainers.image.description=The development version of Zero-TOTP frontend used for testing and development purposes.
              org.opencontainers.image.source=https://github.com/seaweedbraincy/zero-totp
            cache-from: type=gha
            cache-to: type=gha,mode=max
            platforms: ${{ matrix.platform }}
            outputs: type=image,push-by-digest=true,name-canonical=true,push=true
        
        - name: Export digest
          run: |
            mkdir -p ${{ runner.temp }}/digests
            digest="${{ steps.build.outputs.digest }}"
            touch "${{ runner.temp }}/digests/${digest#sha256:}"

        - name: Upload digest
          uses: actions/upload-artifact@v4
          with:
            name: frontend-digests-${{ env.PLATFORM_PAIR }}
            path: ${{ runner.temp }}/digests/*
            if-no-files-found: error
            retention-days: 1




    build-api:
      needs: [tests]
      name: Build and Publish API Docker image
      runs-on: ubuntu-latest
      strategy:
        fail-fast: false
        matrix:
          platform:
            - linux/amd64
            - linux/arm64
      steps:
        - uses: actions/checkout@v4

        - name: Extract Git commit
          id: vars
          run: |
            echo "GIT_COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
            echo "CURRENT_VERSION=$(echo ${{ github.ref_name }} | sed 's/^v//')"  >> $GITHUB_ENV
            echo "REPOSITORY_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV 
            platform=${{ matrix.platform }}
            echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
        
        - name: Set up Qemu 
          uses: docker/setup-qemu-action@v3

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3

        - name: Login to GHCR 
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Docker meta
          id: meta
          uses: docker/metadata-action@v5
          with:
            images: ghcr.io/${{ env.REPOSITORY_NAME }}-api
            tags: |
              type=semver,pattern={{raw}}
              type=raw,value=dev
        
        - name: Populating API version
          working-directory: ./api
          run: echo ${{ github.ref_name }} > ./VERSION && echo ${{ github.sha}} | cut -c1-7 >> ./VERSION

        - name: Build and push Docker images
          id: build
          uses: docker/build-push-action@v6
          env:
            BUILDX_NO_DEFAULT_ATTESTATIONS: 1
          with:
            context: ./api
            tags: ghcr.io/${{ env.REPOSITORY_NAME }}-api
            labels: |
              org.opencontainers.image.title=Zero-TOTP API - dev version 
              org.opencontainers.image.description=The development version of Zero-TOTP API used for testing and development purposes.
              org.opencontainers.image.authors=SeaweedbrainCY <contact@seaweedbrain.xyz>
              org.opencontainers.image.url=https://github.com/seaweedbraincy/zero-totp
              org.opencontainers.image.documentation=https://docs.zero-totp.com
              maintainer=SeaweedbrainCY <contact@seaweedbrain.xyz>
            annotations: |
              org.opencontainers.image.description=The development version of Zero-TOTP API used for testing and development purposes.
              org.opencontainers.image.source=https://github.com/seaweedbraincy/zero-totp
            cache-from: type=gha
            cache-to: type=gha,mode=max
            platforms: linux/amd64
            outputs: type=image,push-by-digest=true,name-canonical=true,push=true
        
        - name: Export digest
          run: |
            mkdir -p ${{ runner.temp }}/digests
            digest="${{ steps.build.outputs.digest }}"
            touch "${{ runner.temp }}/digests/${digest#sha256:}"

        - name: Upload digest
          uses: actions/upload-artifact@v4
          with:
            name: api-digests-${{ env.PLATFORM_PAIR }}
            path: ${{ runner.temp }}/digests/*
            if-no-files-found: error
            retention-days: 1

    merge-frontend-manifests:
      runs-on: ubuntu-latest
      needs:
        - build-frontend
      steps:
        - name: Extract Git commit
          id: vars
          run: |
            echo "REPOSITORY_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV 
            echo "CURRENT_VERSION=$(echo ${{ github.ref_name }} | sed 's/^v//')"  >> $GITHUB_ENV

        - name: Download digests
          uses: actions/download-artifact@v4
          with:
            path: ${{ runner.temp }}/digests
            pattern: frontend-digests-*
            merge-multiple: true

        - name: Login to GHCR 
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3

        - name: Docker meta
          id: meta
          uses: docker/metadata-action@v5
          with:
            images: ghcr.io/${{ env.REPOSITORY_NAME }}-frontend
            tags: |
              type=semver,pattern={{raw}}
              type=raw,value=dev

        - name: Create manifest list and push
          working-directory: ${{ runner.temp }}/digests
          run: |
            docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<<   "$DOCKER_METADATA_OUTPUT_JSON") \
              $(printf 'ghcr.io/${{ env.REPOSITORY_NAME }}-frontend@sha256:%s ' *)

        - name: Inspect image
          run: |
            docker buildx imagetools inspect ghcr.io/${{ env.REPOSITORY_NAME }}-frontend:${{ steps.meta.outputs.version }}
    merge-api-manifests:
      runs-on: ubuntu-latest
      needs:
        - build-api
      steps:
        - name: Extract Git commit
          id: vars
          run: |
            echo "REPOSITORY_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV 
            echo "CURRENT_VERSION=$(echo ${{ github.ref_name }} | sed 's/^v//')"  >> $GITHUB_ENV

        - name: Download digests
          uses: actions/download-artifact@v4
          with:
            path: ${{ runner.temp }}/digests
            pattern: api-digests-*
            merge-multiple: true

        - name: Login to GHCR 
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3

        - name: Docker meta
          id: meta
          uses: docker/metadata-action@v5
          with:
            images: ghcr.io/${{ env.REPOSITORY_NAME }}-api
            tags: |
              type=semver,pattern={{raw}}
              type=raw,value=dev

        - name: Create manifest list and push
          working-directory: ${{ runner.temp }}/digests
          run: |
            docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<<   "$DOCKER_METADATA_OUTPUT_JSON") \
              $(printf 'ghcr.io/${{ env.REPOSITORY_NAME }}-api@sha256:%s ' *)

        - name: Inspect image
          run: |
            docker buildx imagetools inspect ghcr.io/${{ env.REPOSITORY_NAME }}-api:${{ steps.meta.outputs.version }}



    e2e-tests:
        runs-on: ubuntu-latest
        needs: [merge-api-manifests, merge-frontend-manifests] 
        name: Run end-to-end tests
        steps:
            - uses: actions/checkout@v4

            - name: Use last published image 
              working-directory: ./e2e-tests
              run: |
                current_version=$(echo ${{ github.ref_name }} | sed 's/^v//')
                echo "Current version: ${{ env.CURRENT_VERSION }}"
                sed -i "s|\(image: ghcr.io/seaweedbraincy/zero-totp-api:\).*|\1$current_version|" docker-compose.yml
                sed -i "s|\(image: ghcr.io/seaweedbraincy/zero-totp-frontend:\).*|\1$current_version|" docker-compose.yml

            - name: Run e2e docker compose
              uses: hoverkraft-tech/compose-action@v2.0.1
              with:
                compose-file: "./e2e-tests/docker-compose.yml"

            - name: Display current images
              run: docker images
            
            - uses: actions/setup-node@v4
              with:
                node-version: lts/*
            - name: Install dependencies
              working-directory: ./e2e-tests
              run: npm ci
            - name: Install Playwright Browsers
              working-directory: ./e2e-tests
              run: npx playwright install --with-deps

            - name: Verify if the frontend is healthy 
              run: |
                response=$(curl -ks https://localhost)
                if [[ $? -ne 0 ]]; then
                  echo "Frontend is not healthy. Curl error : $?"
                  exit 1
                else
                  echo "Frontend is healthy"
                fi

            - name: Verify if the API is healthy
              run: |
                response=$(curl -ks https://localhost/api/v1/healthcheck)
                health_status=$(echo "$response" | jq .health)
                if [[ $health_status != '"OK"' ]]; then
                  echo "API is not healthy: $response"
                  docker logs -f --tail 100 api
                  exit 1
                else
                  echo "API is healthy"
                fi
            - name: Run Playwright tests
              working-directory: ./e2e-tests
              run: npx playwright test
            - uses: actions/upload-artifact@v4
            
              if: ${{ !cancelled() }}
              with:
                name: playwright-report
                path: ./e2e-tests/playwright-report/
                retention-days: 30
    
    api-docker-security-scan:
      needs: [merge-api-manifests]
      name: Scan API Docker image for security vulnerabilities
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3
        - name: Install Trivy
          run: |
            sudo apt-get install wget apt-transport-https gnupg lsb-release
            wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
            echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
            sudo apt-get update
            sudo apt-get install trivy

        - name: Scan Docker image
          run: |
            current_version=$(echo ${{ github.ref_name }} | sed 's/^v//')
            trivy image --exit-code 1 --severity CRITICAL,HIGH --no-progress --ignore-unfixed ghcr.io/${{ secrets.USERNAME_GITHUB }}/zero-totp-api:$current_version


    frontend-docker-security-scan:
      needs: [merge-frontend-manifests]
      name: Scan Frontend Docker image for security vulnerabilities
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3
        - name: Install Trivy
          run: |
            sudo apt-get install wget apt-transport-https gnupg lsb-release
            wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
            echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
            sudo apt-get update
            sudo apt-get install trivy

        - name: Scan Docker image
          run: |
            current_version=$(echo ${{ github.ref_name }} | sed 's/^v//')
            trivy image --exit-code 1 --severity CRITICAL,HIGH --no-progress --ignore-unfixed ghcr.io/${{ secrets.USERNAME_GITHUB }}/zero-totp-frontend:$current_version


    deploy-dev-env:
       needs: [e2e-tests, api-docker-security-scan, frontend-docker-security-scan] 
       name: Deploy on development environment
       runs-on: ubuntu-latest
       steps:
         - name: Dev env deployment
           uses: distributhor/workflow-webhook@v3
           env:
             webhook_url: ${{ secrets.WEBHOOK_URL_DEV }}
        
