name: "zero-totp.com deployment"

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
    tests_and_security:
      name: Tests and security analysis
      uses: ./.github/workflows/security_analysis.yml  # use the callable tests job to run tests
      secrets:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }} 

    docker-frontend:
      needs: [tests_and_security]
      name: Publish Frontend Docker image
      runs-on: ubuntu-latest
      env:
        REPO: zero-totp-frontend
      steps:
        - uses: actions/checkout@v3
        - name: Login to Docker Hub
          run : docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASS }}
        - name: Create frontend environment file
          working-directory: ./frontend
          run: bash generate-env.sh '${{ github.ref_name }}' '${{secrets.RSA_PUBLIC_KEY}}'
        - name: Generate sitemap.xml
          working-directory: ./frontend
          run: bash generate_sitemap.sh 
        - name: Build Docker image
          working-directory: ./frontend
          run: |
            current_short_version=$(echo ${{ github.ref_name }} | sed -E 's/^v([0-9]+)\.([0-9]+)\.[0-9]+$/\1.\2/') 
            current_long_version=$(echo ${{ github.ref_name }} |  sed -E 's/^v//')
            docker build -t $REPO:latest -t $REPO:$current_long_version -t $REPO:$current_short_version . 
        - name: Publish Docker Image to DockerHub
          run: docker push $REPO --all-tags
        - name: Publish Docker Image to Github Registry
          run: docker push ghcr.io/${{ secrets.USERNAME_GITHUB }}/$REPO --all-tags
    docker-api:
      needs: [tests_and_security]
      name: Publish API Docker image
      runs-on: ubuntu-latest
      env:
        REPO: zero-totp-api
      steps:
        - uses: actions/checkout@v3
        - name: Login to Github
          run : echo ${{ secrets.TOKEN_GITHUB }} | docker login ghcr.io -u ${{ secrets.USERNAME_GITHUB }} --password-stdin
        - name: Login to Docker Hub
          run : docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASS }}
        - name: Populating API version
          working-directory: ./api
          run: echo ${{ github.ref_name }} > ./VERSION
        - name: Populating API version
          working-directory: ./api
          run: echo ${{ github.ref_name }} > ./VERSION && echo ${{ github.sha}} | cut -c1-7 >> ./VERSION
        - name: Build Docker image
          working-directory: ./api
          run: |
            current_short_version=$(echo ${{ github.ref_name }} | sed -E 's/^v([0-9]+)\.([0-9]+)\.[0-9]+$/\1.\2/') 
            current_long_version=$(echo ${{ github.ref_name }} |  sed -E 's/^v//')
            docker build -t $REPO:latest -t $REPO:$current_long_version -t $REPO:$current_short_version . 
        - name: Publish Docker Image to DockerHub
          run: docker push $REPO --all-tags
        - name: Publish Docker Image to Github Registry
          run: docker push ghcr.io/${{ secrets.USERNAME_GITHUB }}/$REPO --all-tags

    e2e-tests:
        runs-on: ubuntu-latest
        needs: [docker-frontend, docker-api] 
        name: Run end-to-end tests
        steps:
            - uses: actions/checkout@v4

            - name: Use last published image 
              working-directory: ./e2e-tests
              run: |
                current_version=$(echo ${{ github.ref_name }} | sed 's/^v//')
                sed -i "s|\(image: ghcr.io/seaweedbraincy/zero-totp-api:\).*|\1$current_version|" docker-compose.yml
                sed -i "s|\(image: ghcr.io/seaweedbraincy/zero-totp-frontend:\).*|\1$current_version|" docker-compose.yml

            - name: Run e2e docker compose
              uses: hoverkraft-tech/compose-action@v2.0.1
              with:
                compose-file: "./e2e-tests/docker-compose.yml"
            
            - uses: actions/setup-node@v4
              with:
                node-version: lts/*
            - name: Install dependencies
              working-directory: ./e2e-tests
              run: npm ci
            - name: Install Playwright Browsers
              working-directory: ./e2e-tests
              run: npx playwright install --with-deps
            - name: Add DNS entry to /etc/hosts
              run: |
                echo "127.0.0.1 zero-totp.lan" | sudo tee -a /etc/hosts
                cat /etc/hosts
            - name: Run Playwright tests
              working-directory: ./e2e-tests
              run: npx playwright test 
            - uses: actions/upload-artifact@v4
            
              if: ${{ !cancelled() }}
              with:
                name: playwright-report
                path: ./e2e-tests/playwright-report/
                retention-days: 30
    deploy-production-sw:
       needs: [e2e-tests]
       name: Deploy on production server (SW)
       environment: 
        name: Production (SW)
        url: https://sw.zero-totp.com
       runs-on: ubuntu-latest
       steps:
         - name: SW deployment
           uses: distributhor/workflow-webhook@v3
           env:
             webhook_url: ${{ secrets.WEBHOOK_URL_SW }}
    deploy-production-ca:
        needs: [e2e-tests]
        name: Deploy on production server (CANADA)
        environment: 
           name: Production (CANADA)
           url: https://ca.zero-totp.com
        runs-on: ubuntu-latest
        steps:
          - name: CA deployment
            uses: distributhor/workflow-webhook@v3
            env:
              webhook_url: ${{ secrets.WEBHOOK_URL_CA }}
    deploy-production-themis:
        needs: [e2e-tests]
        name: Deploy on production server (THEMIS)
        environment: 
           name: Production (THEMIS)
           url: https://themis.zero-totp.com
        runs-on: ubuntu-latest
        steps:
          - name: TH deployment
            uses: distributhor/workflow-webhook@v3
            env:
              webhook_url: ${{ secrets.WEBHOOK_URL_TH }}

        
