openapi: 3.0.3
info:
  title: zero-totp API
  description: API for the zero-totp application
  version: "1.0"
servers:
  - url: /api/v1
security:
  - SessionToken: []
paths:
  /signup:
    post:
      operationId: controllers.signup
      tags:
        - Auth
      summary: Sign a user up to the application
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - username
                - password
                - derivedKeySalt
                - ZKE_key
                - passphraseSalt
              properties:
                email:
                  type: string
                username:
                  type: string
                password:
                  type: string
                derivedKeySalt:
                  type: string
                ZKE_key:
                  type: string
                  description: The user's ZKE key ENCRYPTED by the user
                passphraseSalt:
                  type: string
      responses:
        "201": # status code
          description: Sign up successful
        "400":
          description: Missing required parameters
        "409":
          description: User already exists
  /login:
    post:
      operationId: controllers.login
      tags:
        - Auth
      summary: Log a user in the application
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "200": # status code
          description: successful login. The session and refresh tokens is returned in the response body
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    example: "foo"
                  id:
                    type: integer
                    example: 1
                  derivedKeySalt:
                    type: string
                    example: "AAAAA="
                  role:
                    type: string
                    example: "user"
        "400":
          description: Missing required parameters
        "403":
          description: Authentication failed
  /logout:
    put:
      operationId: controllers.logout
      tags:
        - Auth
      summary: Log a user out of the application
      responses:
        "200": # status code
          description: successful logout
        "401":
          description: Unauthorized
  /login/specs:
    get:
      operationId: controllers.get_login_specs
      tags:
        - Auth
      summary: Return the login specs for this user
      security: []
      parameters:
        - in: query
          name: username
          schema:
            type: string
          required: true
          description: The user's email
      responses:
        "200": # status code
          description: Return the login specs
  /auth/refresh:
    put:
      operationId: controllers.auth_refresh_token
      security: []
      tags:
        - Auth
      summary: Refresh the user's session
      responses:
        "200": # status code
          description: Return the new session and refresh tokens
        "401":
          description: Unauthorized
  /zke_encrypted_key:
    get:
      operationId: controllers.get_ZKE_encrypted_key
      tags:
        - Vault
      summary: Return the user's encrypted ZKE key (encrypted by the user, before transmitting)
      responses:
        "200": # status code
          description: Return the user's ZKE key (encrypted)
        "401":
          description: Unauthorized
        "403":
          description: Access denied
  /encrypted_secret:
    post:
      operationId: controllers.add_encrypted_secret
      tags:
        - Vault
      summary: Add an encrypted secret to the user's vault
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - enc_secret
              properties:
                enc_secret:
                  type: string
      responses:
        "201": # status code
          description: Return uuid of the new secret
          content:
            application/json:
              schema:
                type: object
                properties:
                  uuid:
                    type: string
                    example: 5cb7f86f-afe9-4666-9728-47ea2f505957

        "400":
          description: Missing required parameters
        "401":
          description: Unauthorized
        "403":
          description: Access denied
  /encrypted_secret/{uuid}:
    get:
      operationId: controllers.get_encrypted_secret
      tags:
        - Vault
      summary: Return the user's encrypted secret
      parameters:
        - in: path
          name: uuid
          schema:
            type: string
          required: true
          description: The uuid of the secret to retrieve
      responses:
        "200": # status code
          description: Return the user's encrypted secret
        "400":
          description: Missing required parameters
        "401":
          description: Unauthorized
        "403":
          description: Access denied
    put:
      operationId: controllers.update_encrypted_secret
      tags:
        - Vault
      summary: Update an encrypted secret in the user's vault
      parameters:
        - in: path
          name: uuid
          schema:
            type: string
          required: true
          description: The uuid of the secret to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - enc_secret
              properties:
                enc_secret:
                  type: string
      responses:
        "201": # status code
          description: Secret updated
        "400":
          description: Missing required parameters
        "401":
          description: Unauthorized
        "403":
          description: Access denied
    delete:
      operationId: controllers.delete_encrypted_secret
      tags:
        - Vault
      summary: Delete an encrypted secret from the user's vault
      parameters:
        - in: path
          name: uuid
          schema:
            type: string
          required: true
          description: The uuid of the secret to delete
      responses:
        "201": # status code
          description: Secret deleted
        "400":
          description: Missing required parameters
        "401":
          description: Unauthorized
        "403":
          description: Access denied
  /all_secrets:
    get:
      operationId: controllers.get_all_secrets
      tags:
        - Vault
      summary: Return all the user's encrypted secrets
      responses:
        "200": # status code
          description: Return all the user's encrypted secrets
        "401":
          description: Unauthorized
        "404":
          description: No secrets found
  /update/email:
    put:
      operationId: controllers.update_email
      tags:
        - User
      summary: Update the user's email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
      responses:
        "201": # status code
          description: email updated
        "400":
          description: Missing required parameters
        "401":
          description: Unauthorized
        "403":
          description: Access denied
  /update/username:
    put:
      operationId: controllers.update_username
      tags:
        - User
      summary: Update the user's username
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
              properties:
                username:
                  type: string
      responses:
        "201":
          description: username updated
        "400":
          description: Missing required parameters
        "401":
          description: Unauthorized
        "403":
          description: Access denied
  /update/vault:
    put:
      operationId: controllers.update_vault
      tags:
        - User
      summary: Update the user's passphrase, encrypted vault and zke ecrypted key
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - old_passphrase
                - new_passphrase
                - enc_vault
                - zke_enc
                - passphrase_salt
                - derived_key_salt
              properties:
                old_passphrase:
                  type: string
                new_passphrase:
                  type: string
                enc_vault:
                  type: string
                zke_enc:
                  type: string
                passphrase_salt:
                  type: string
                derived_key_salt:
                  type: string
      responses:
        "201": # status code
          description: passphrase, vault and zke key updated
        "400":
          description: Missing required parameters
        "401":
          description: Unauthorized
        "403":
          description: Access denied
        "500":
          description: Internal server error

  /vault/export:
    get:
      operationId: controllers.export_vault
      tags:
        - Vault
      summary: Return all the user's encrypted vault ready for download
      responses:
        "200": # status code
          description: Return all the user's encrypted secrets
        "401":
          description: Unauthorized
        "404":
          description: No secrets found

  /vault/verification/public-key:
    get:
      operationId: controllers.get_public_key
      tags:
        - Vault
      summary: Return the public key used to verify the vault signature
      security: []
      responses:
        "200": # status code
          description: Return the public key
          content:
            application/json:
              schema:
                type: object
                properties:
                  public_key:
                    type: string
                    example: "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQ...\n-----END PUBLIC KEY-----"




  /google-drive/oauth/authorization-flow:
    get:
      operationId: controllers.get_authorization_flow
      tags:
        - Google Drive
      summary: Get the OAuth authorization flow URI
      responses:
        "200": 
          description: Return the authorization URI
        "401":
          description: Unauthorized
        "403":
          description: Access denied
  
  /google-drive/oauth/callback:
    get:
      operationId: controllers.oauth_callback
      tags:
        - Google Drive
      summary: OAuth callback endpoint for the authorization flow
      responses:
        "302": 
          description: Callback successful
  
  /google-drive/option:
    get:
      operationId: controllers.get_google_drive_option
      tags:
        - Google Drive
      summary: Check if the google drive option as a backup is enabled
      responses:
        "200": 
          description: Return the sync status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The option status
                    example: "enabled"
        "401":
          description: Unauthorized
        "403":
          description: Access disabled
    delete:
      operationId: controllers.delete_google_drive_option
      tags:
        - Google Drive
      summary: Disable the google drive option as a backup. Delete the oauth token.
      responses:
        "200": 
          description: Google drive option disabled
        "401":
          description: Unauthorized
        "403":
          description: Access disabled
  /google-drive/backup:
    put:
      operationId: controllers.backup_to_google_drive
      tags:
        - Google Drive
      summary: Back up the encrypted vault to Google Drive
      responses:
        "200": 
          description: Return the backup status
        "401":
          description: Unauthorized
        "403":
          description: Access Forbidden
        "500":
          description: Backup failed
    delete:
      operationId: controllers.delete_google_drive_backup
      tags:
        - Google Drive
      summary: Delete all backups from Google Drive
      responses:
        "200": 
          description: All backups deleted
        "401":
          description: Unauthorized
        "403":
          description: Access Forbidden
        "500":
          description: Backup failed

  /role:
    get:
      operationId: controllers.get_role
      tags:
        - User
      summary: Return the user's role
      responses:
        "200": # status code
          description: Return the user's role. It can be "user" or "admin" or "blocked" or "unverified" if the user haven't verified his email yet
          content:
            application/json:
              schema:
                type: object
                properties:
                  role:
                    type: string
                    example: user
        "401":
          description: Unauthorized
        "404":
          description: No role found
  /preferences:
    get:
      operationId: controllers.get_preferences
      tags:
        - User
      summary: Return the user's role
      parameters:
        - in: query
          name: fields
          schema:
            type: string
          required: true
          description: The field to retrieve. Can be "favicon_policy", "derivation_iteration", "backup_lifetime", "backup_minimum", "autolock_delay" or "all". Fields can be separated by a comma.
      responses:
        "200": # status code
          description: Return the user's role
          content:
            application/json:
              schema:
                type: object
                properties:
                  field_name1:
                    type: string
                    example: value1
                  field_name2:
                    type: string
                    example: value2
                  
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
    put:
      operationId: controllers.set_preference
      tags:
        - User
      summary: Update one of the user's preferences
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - value
              properties:
                id:
                  type: string
                  description: The preference id
                  example:  favicon_policy || derivation_iteration || backup_lifetime || backup_minimum || autolock_delay
                value:
                  oneOf:
                    - type: string
                    - type: integer
                  required:
                    - ""
                  description: The preference value
                  example: always || 1000 || 30 || 1 || 10
      responses:
        "201": # status code
          description: Preferences updated
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
  /google-drive/last-backup/verify:
    get:
      operationId: controllers.verify_last_backup
      tags:
        - Google Drive
      summary: Verify the last backup checksum to determine if the last backup is up to date.
      responses:
        "200": 
          description: Return the last backup date and if it's up to date. If an error occurs during the verification, the status contains the error key.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok|corrupted_file"
                  is_up_to_date:
                    type: boolean
                    example: true
                  last_backup_date:
                    type: string
                    example: 01/01/2001
        "401":
          description: Unauthorized.
        "403":
          description: Access disabled
        "404":
          description: No backup found
        "500":
          description: Internal server error
  /whoami:
    get: 
      operationId: controllers.get_whoami
      tags:
        - User
      summary: Return the user basic account information (id, username, email)
      responses:
        "200": 
          description: Return the user's account
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  username:
                    type: string
                    example: "foo"
                  email:
                    type: string
                    example: "bar"
        "401":
          description: Unauthorized
        "403":
          description: Access disabled
        "500":
          description: Internal server error
  /account:
    delete:
      operationId: controllers.delete_account
      tags:
        - User
      summary: Delete the user's account. WARNING The hashed passphrase is required in x-hash-passphrase header !
      responses:
        "200": 
          description: Account deleted
        "401":
          description: Unauthorized
        "403":
          description: Access disabled
        "500":
          description: Internal server error
  /email/verify:
    put:
      operationId: controllers.verify_email
      tags:
        - User
      summary: Verify the user token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
      responses:
        "200": 
          description: Return the email verification token
        "401":
          description: Unauthorized
        "403":
          description: Access disabled
        "500":
          description: Internal server error
  /email/send_verification:
    get:
      operationId: controllers.send_verification_email
      tags:
        - User
      summary: Send the email verification email
      responses:
        "200": 
          description: Email sent
        "401":
          description: Unauthorized
        "403":
          description: Access disabled
        "500":
          description: Internal server error
  /notification/global:
    get: 
      operationId: controllers.get_global_notification
      tags:
        - Notification
      summary: Return the user's last global notification
      security: []
      responses:
        "200": 
          description: Return the user's notifications
          content:
            application/json:
              schema:
                type: object
                properties:
                  authenticated_user_only:
                    type: boolean
                    example: true
                  display_notification:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Notification message"
                  timestamp:
                    type: number
                    example: 1723399133
        "500":
          description: Internal server error
  /notification/internal:
    get: 
      operationId: controllers.get_internal_notification
      tags:
        - Notification
      summary: Return the user's last internal notification
      responses:
        "200": 
          description: Return the user's notifications
          content:
            application/json:
              schema:
                type: object
                properties:
                  display_notification:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Notification message"
                  timestamp:
                    type: number
                    example: 1723399133
        "500":
          description: Internal server error
  /healthcheck:
    get:
      operationId: controllers.health_check
      tags:
        - General
      summary: Check the health of the API
      security: []
      responses:
        "200": 
          description: API is healthy
        "500":
          description: API is unhealthy

  /backup/configuration:
    get:
      operationId: endpoints_controllers.backup.get_backup_configuration
      parameters:
        - in: query
          name: dv
          schema:
            type: string
          required: false
          description: Default Value (dv). If dv=true, then the default configuration value are also returned to the user
      tags:
        - Backup
      summary: Get the configuration of the maximum age and minimum count of backups.  If the backup is older than the max age value, and if the minimum backup number if reach, the backup is deleted. 
      responses:
        "200": 
          description: Return the user's backup configuration
          content:
            application/json:
              schema:
                type: object
                properties:
                  max_age_in_days:
                    type: number
                    example: 30
                  backup_minimum_count:
                    type: number
                    example: 20
                  default_max_age_in_days:
                    type: number
                    example: 30 (optional, only if dv=true)
                  default_backup_minimum_count:
                    type: number
                    example: 20 (optional, only if dv=true)
        "401":
          description: Unauthorized
        "403":
          description: Access forbidden
        "500":
          description: Internal server error 
  
  /backup/configuration/{option}:
      put:
        operationId: endpoints_controllers.backup.set_backup_configuration
        tags:
          - Backup
        summary: Set the configuration backups. Option can be "max_age_in_days" or "backup_minimum_count".
        parameters:
          - in: path
            name: option
            schema:
              type: string
            required: true
            description: The option to update. Can be "max_age_in_days" or "backup_minimum_count"
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                required:
                  - value
                properties:
                  value:
                    type: number
                    example: 30
        responses:
          "201": 
            description: Return the user's backup configuration
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    max_age_in_days:
                      type: number
                      example: 30
                    backup_minimum_count:
                      type: number
                      example: 20
          "400":
            description: Bad request
          "401":
            description: Unauthorized
          "403":
            description: Access forbidden
          "500":
            description: Internal server error


    
components:
  securitySchemes:
    SessionToken:
      type: apiKey
      in: cookie
      name: session-token
      x-apikeyInfoFunc: CryptoClasses.session_verification.verify_session
      
